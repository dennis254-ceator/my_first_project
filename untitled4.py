# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hv7QrumN62lXPlyLrgxnTfSdT9li4xPC
"""

# Financial Risk Assessment Tool for Kenya
# Requires: pandas, numpy, scikit-learn, matplotlib

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt

# Sample dataset (replace with real data)
data = {
    'age': [25, 35, 45, 30, 50, 28, 33, 40, 60, 55],
    'income': [50000, 120000, 300000, 80000, 450000, 60000, 95000, 280000, 150000, 320000],
    'loan_amount': [200000, 500000, 1000000, 300000, 1500000, 250000, 400000, 800000, 500000, 900000],
    'credit_history': [0, 1, 1, 0, 1, 0, 1, 1, 0, 1],
    'employment_status': [0, 1, 1, 0, 1, 0, 1, 1, 0, 1],  # 0=unemployed, 1=employed
    'default': [1, 0, 0, 1, 0, 1, 0, 0, 1, 0]  # Target variable
}

df = pd.DataFrame(data)

# Feature engineering for Kenyan context
def add_risk_features(df):
    # Debt-to-income ratio
    df['dti'] = df['loan_amount'] / df['income']
    # Age categorization
    df['age_group'] = pd.cut(df['age'], bins=[20, 30, 40, 50, 60], labels=[1, 2, 3, 4])
    return df

df = add_risk_features(df)

# Split data
X = df.drop('default', axis=1)
y = df['default']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Feature importance
features = X.columns
importances = model.feature_importances_
plt.barh(features, importances)
plt.title("Feature Importance in Credit Risk Assessment")
plt.show()

# Example prediction
new_applicant = pd.DataFrame({
    'age': [32],
    'income': [85000],
    'loan_amount': [400000],
    'credit_history': [1],
    'employment_status': [1],
    'dti': [400000/85000],
    'age_group': [2]
})

prediction = model.predict(new_applicant)
print(f"\nDefault Risk Prediction (1=high risk, 0=low risk): {prediction[0]}")

# Example additional features
df['mobile_money_usage'] = [5, 20, 8, 12, 3, 15, 10, 7, 2, 9]  # Monthly transactions
df['agricultural_income'] = [0, 1, 0, 1, 1, 0, 1, 0, 0, 1]  # 1=has agricultural income

# Example API integration for Kenyan data
import requests

def get_cbk_rates():
    url = "https://api.centralbank.go.ke/v1/markets/forex"
    response = requests.get(url)
    return response.json()

def get_inflation_data():
    url = "https://knbs.or.ke/api/inflation"
    response = requests.get(url)
    return response.json()